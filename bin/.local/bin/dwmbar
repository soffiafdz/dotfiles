#!/bin/sh
# This script sets the statusbar with the xsetroot command at the end.
for pid in $(pgrep -f dwmbar); do
  if [ "$pid" != "$$" ]; then
    kill "$pid"
  fi
done

sleep 1

# Exit if dwm isn't running
if ! pgrep dwm >/dev/null 2>&1; then
  echo "dwm not running"
  exit 1
fi

# Set delimeter
delim=""

# Here is the (big) function that outputs the appearance of the statusbar. It
# can really be broken down into many submodules which I've commented and
# explained.	Note that I use printf "%s" to format everything without line
# breaks. I try to put | as delimiters between modules.
status() {
  # Get current mpd track filename or artist - title if possible.
  # mpc -f "[[%artist% - [%title%]" 2>/dev/null | grep -v "volume:" | head -n 1 && echo "$delim"

  ### Volume
  case $HOSTNAME in
  *mcgill*)
    # Use PulseAudio on mcgill systems - get default sink info
    sink_info=$(pactl info | grep "Default Sink" | cut -d: -f2 | tr -d ' ')
    if [ -n "$sink_info" ]; then
      # Get mute status and volume from sink info
      mute=$(pactl list sinks | grep -A 15 "Name: $sink_info" | grep "Mute:" | awk '{print $2}')
      vol=$(pactl list sinks | grep -A 15 "Name: $sink_info" | grep "Volume:" | head -n1 | awk '{print $5}' | sed 's/%//')

      case $mute in
      "yes") echo "   $delim" ;;
      "no")
        case $vol in
        0) echo " $vol   $delim" ;;
        [0-9]% | [1-2][0-9]%) echo " $vol 奄 $delim" ;;
        [3-6][0-9]%) echo " $vol  $delim" ;;
        [7-9][0-9]% | 1[0-9][0-9]%) echo " $vol   $delim" ;;
        esac
        ;;
      esac
    else
      # Fallback if we can't determine default sink
      echo "   $delim"
    fi
    ;;
  *)
    # Use pamixer on other systems
    mute=$(pamixer --get-mute)
    vol=$(pamixer --get-volume-human)
    case $mute in
    "true") echo "   $delim" ;;
    "false") case $vol in
      0%) echo " $vol   $delim" ;;
      [0-9]% | [1-2][0-9]%) echo " $vol 奄 $delim" ;;
      [3-6][0-9]%) echo " $vol  $delim" ;;
      [7-9][0-9]% | 1[0-9][0-9]%) echo " $vol   $delim" ;;
      esac ;;
    esac
    ;;
  esac

  ### Internet
  # Wifi quality percentage and  icon if ethernet is connected.
  # Make if for when there is no network
  case $HOSTNAME in
  *mcgill*)
    # Different network interface handling for mcgill systems
    # Check if eth0 exists first (since we can see it in your output)
    if [ -f "/sys/class/net/eth0/operstate" ]; then
      eth_state=$(cat /sys/class/net/eth0/operstate)
      case $eth_state in
      "up") echo "󰈁 $delim" ;;
      "down") echo "󰈂 $delim" ;;
      *) echo "󰈂 $delim" ;;
      esac
    else
      # Try to find any ethernet interface
      eth_interface=$(ls /sys/class/net/ | grep '^eth' | head -n1)
      if [ -n "$eth_interface" ] && [ -f "/sys/class/net/$eth_interface/operstate" ]; then
        eth_state=$(cat "/sys/class/net/$eth_interface/operstate")
        case $eth_state in
        "up") echo "󰈁 $delim" ;;
        "down") echo "󰈂 $delim" ;;
        *) echo "󰈂 $delim" ;;
        esac
      else
        # No ethernet found, show disconnected
        echo "󰈂 $delim"
      fi
    fi
    ;;
  *)
    # Original logic for other systems
    sed "s/down/󰈂 $delim/;s/up/󰈁 $delim/" /sys/class/net/e*/operstate
    ;;
  esac

  wifi=$(grep "^\s*w" /proc/net/wireless | awk '{ print int($3 * 100 / 70) "%"}')
  [ -z "$wifi" ] && echo "󰖪 $delim" || echo "$wifi 󰖩 $delim"
  # Show unread mail if mutt-wizard is installed.
  # command -v mw >/dev/null 2>&1 &&
  #		 echo "$delim" &&
  #		 du -a ~/.local/share/mail/*/INBOX/new/* 2>/dev/null | wc -l | sed 's/^/:/'
  #		 echo "$delim"

  ### Disk
  # Disk space available
  case $HOSTNAME in
  "hyde")
    disk=$(df -h | awk '/^\/dev\/nvme0n1p6/ {print $5}')
    disk2=$(df -h | awk '/^\/dev\/sda2/ {print $5}')
    ;;
  "lettera")
    disk=$(df -h | awk '/^\/dev\/sda1/ {print $5}')
    disk2=$(df -h | awk '/^\/dev\/sda3/ {print $5}')
    ;;
  "tango")
    disk=$(df -h | awk '/^\/dev\/nvme0n1p2/ {print $5}')
    disk2=$(df -h | awk '/^\/dev\/nvme0n1p3/ {print $5}')
    ;;
  *mcgill*)
    # Add mcgill system disk configuration here if needed
    disk=$(df -h | awk '/^home:\/home/ {print $5}')
    ;;
  *)
    # Default/unknown system
    disk=""
    disk2=""
    ;;
  esac

  # Only echo if we have disk info
  if [ -n "$disk" ] && [ -n "$disk2" ]; then
    echo "$disk|$disk2  $delim"
  elif [ -n "$disk" ]; then
    echo "$disk  $delim"
  elif [ -n "$disk2" ]; then
    echo "$disk2 󰋊 $delim"
  fi

  ### Memory
  # Memory used/total
  free -h | awk '/^Mem:/ {print $3}'
  echo " $delim"

  ### CPU temp
  case $HOSTNAME in
  "hyde")
    temp=$(sensors | awk '/^Tctl:/ {print $2}' | sed -e "s/+//; s/C//")
    ;;
  "lettera")
    temp=$(sensors | awk '/^temp1:/ {print $2}' | sed -e "s/+//; s/C//")
    ;;
  *mcgill*)
    # Add mcgill system temperature sensor here if needed
    temp=$(sensors | awk '/^Tctl:/ {print $2}' | sed -e "s/+//; s/C//")
    ;;
  *)
    temp=$(sensors | awk '/skylake/ {getline; getline; print $2}' | sed -e "s/+//; s/C//")
    ;;
  esac
  if [ -n "$temp" ]; then
    echo "$temp󰔄 $delim"
  fi

  ### Battery
  # Will show battery with approximate icon for remaining power.
  if [ -f "/sys/class/power_supply/BAT0/capacity" ] &&
    [ -f "/sys/class/power_supply/BAT0/status" ]; then
    batt=$(cat /sys/class/power_supply/BAT0/capacity)
    bstat=$(cat /sys/class/power_supply/BAT0/status)
    case $batt in
    9[5-9] | 1[0-2][0-9]) bcap=" " ;;
    8[5-9] | 9[0-4]) bcap=" " ;;
    7[5-9] | 8[0-4]) bcap=" " ;;
    6[5-9] | 7[0-4]) bcap=" " ;;
    5[5-9] | 6[0-4]) bcap=" " ;;
    4[5-9] | 5[0-4]) bcap=" " ;;
    3[5-9] | 4[0-4]) bcap=" " ;;
    2[5-9] | 3[0-4]) bcap=" " ;;
    1[5-9] | 2[0-4]) bcap=" " ;;
    [5-9] | 1[0-4]) bcap=" " ;;
    [0-5]) bcap=" " ;;
    *) : ;;
    esac

    # Only print if bcap is set (battery icon found)
    if [ -n "$bcap" ]; then
      if [ "$bstat" = "Charging" ]; then
        echo "$bcap" | awk -v batt="$batt% " -v delim=" $delim" '{print batt $2 delim}'
      elif [ "$bstat" = "Discharging" ] || [ "$bstat" = "Full" ] || [ "$bstat" = "Unknown" ]; then
        echo "$bcap" | awk -v batt="$batt% " -v delim=" $delim" '{print batt $1 delim}'
      fi
    fi
  fi

  ### TIME
  time=$(date '+%H:%M')
  hr=$(date '+%I')
  case $hr in
  01) echo "$time 󱐿 $delim" ;;
  02) echo "$time 󱑀 $delim" ;;
  03) echo "$time 󱑁 $delim" ;;
  04) echo "$time 󱑂 $delim" ;;
  05) echo "$time 󱑃 $delim" ;;
  06) echo "$time 󱑄 $delim" ;;
  07) echo "$time 󱑅 $delim" ;;
  08) echo "$time 󱑆 $delim" ;;
  09) echo "$time 󱑇 $delim" ;;
  10) echo "$time 󱑈 $delim" ;;
  11) echo "$time 󱑉 $delim" ;;
  12) echo "$time 󱑊 $delim" ;;
  esac

  ### Date
  echo "$(date '+%y:%m:%d') "
}

while pgrep dwm >/dev/null 2>&1; do
  xsetroot -name "$(status | tr '\n' ' ')"
  sleep 60s
done
